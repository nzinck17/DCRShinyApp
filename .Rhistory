shiny::runApp()
ipak <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
# Set Library path for installantion
.libPaths("C:/Users/DCR-Tobiason/Documents/R/win-library/3.4")
# usage
ipak("shiny")
runApp()
df <- df.trib.wach %>%
#filter(LocationLabel %in% c(site())) %>%
.$Parameter %>%
factor() %>%
levels()
df <- df.trib.wach %>%
#filter(LocationLabel %in% c(site())) %>%
group_by(Parameter) %>%
summarise(StartDate = min(Date),
EndDate = max(Date))
df.trib.wach %>%
#filter(LocationLabel %in% c(site())) %>%
group_by(Parameter) %>%
summarise(StartDate = min(Date),
EndDate = max(Date))
View(df)
df.trib.wach %>%
#filter(LocationLabel %in% c(site())) %>%
group_by(Parameter) %>%
summarise(`Number of Samples` = n(),
`Start Date` = min(Date),
`End Date` = max(Date),
`Latest Result` = Result[Date == max(Date)])
df <- df.trib.wach %>% .$LocationLabel %>% factor() %>% level()
df <- df.trib.wach %>% .$LocationLabel %>% factor() %>% levels()
df.trib.wach %>% .$LocationLabel %>% factor() %>% levels()
df <- df.trib.wach %>% #.$LocationLabel %>% factor() %>% levels()
filter(LocationLabel %in% "190 Basin - MD75.9") %>%
group_by(Parameter) %>%
summarise(`Number of Samples` = n(),
`Start Date` = min(Date),
`End Date` = max(Date),
`Latest Result` = Result[Date == max(Date)])
df.trib.wach %>% #.$LocationLabel %>% factor() %>% levels()
filter(LocationLabel %in% "190 Basin - MD75.9") %>%
group_by(Parameter) %>%
summarise(`Number of Samples` = n(),
`Start Date` = min(Date),
`End Date` = max(Date),
`Latest Result` = Result[Date == max(Date)])
df.trib.wach %>% #.$LocationLabel %>% factor() %>% levels()
filter(LocationLabel %in% "190 Basin - MD75.9") %>%
summarise(`Parameter` = "ALL"
`Number of Samples` = n(),
`Start Date` = min(Date),
`End Date` = max(Date),
`Latest Result` = NA,
`Latest Units` = NA)
df.trib.wach %>% #.$LocationLabel %>% factor() %>% levels()
filter(LocationLabel %in% "190 Basin - MD75.9") %>%
summarise(`Parameter` = "ALL",
`Number of Samples` = n(),
`Start Date` = min(Date),
`End Date` = max(Date),
`Latest Result` = NA,
`Latest Units` = NA)
df2 <- df.trib.wach %>% #.$LocationLabel %>% factor() %>% levels()
filter(LocationLabel %in% "190 Basin - MD75.9") %>%
group_by(Parameter) %>%
summarise(`Number of Samples` = n(),
`Start Date` = min(Date),
`End Date` = max(Date),
`Latest Result` = Result[Date == max(Date)],
`Latest Units` = Units[Date == max(Date)])
df1 <- df.trib.wach %>% #.$LocationLabel %>% factor() %>% levels()
filter(LocationLabel %in% "190 Basin - MD75.9") %>%
summarise(`Parameter` = "ALL",
`Number of Samples` = n(),
`Start Date` = min(Date),
`End Date` = max(Date),
`Latest Result` = NA,
`Latest Units` = NA)
rbind(df1, df2)
?renderDataTable
runApp()
DF_Site_Add <- rbind(DF_Site_Add_1(), DF_Site_Add_2())
output$table.site.select <- renderDataTable(df.site.select, selection = 'single')
metadata <- function(input, output, session, df.full, df.filtered, df.site, df.param, df.flag) {
ns <- session$ns # see General Note 1
### Dataframe filtered or full based on Selection
DF <- reactive({
if(input$dfchoice == "filtered"){
df.filtered()
}else{
df.full
}
})
### Primary Tables
output$table.site <- renderDataTable(df.site, selection = 'single')
output$table.param <- renderDataTable(df.param, selection = 'single')
output$table.flag <- renderDataTable(df.flag, selection = 'single')
#DT::datatable(df.react.corr(), options = list(lengthMenu = c(15, 25, 50, 100), pageLength = 15))
### Additonal Site Info Table
DF_Site_Add_1 <- reactive({
DF() %>%
filter(LocationLabel %in% input$table.site_rows_selected) %>%
group_by(Parameter) %>%
summarise(`Number of Samples` = n(),
`Start Date` = min(Date),
`End Date` = max(Date),
`Latest Result` = Result[Date == max(Date)],
`Units` = Units[Date == max(Date)])
})
DF_Site_Add_2 <- reactive({
DF() %>%
filter(LocationLabel %in% input$table.site_rows_selected) %>%
summarise(`Parameter` = "ALL",
`Number of Samples` = n(),
`Start Date` = min(Date),
`End Date` = max(Date),
`Latest Result` = NA,
`Units` = NA)
})
DF_Site_Add <- rbind(DF_Site_Add_1(), DF_Site_Add_2())
output$table.site.select <- renderDataTable(df.site.select, selection = 'single')
} # end Server Function
runApp()
runApp()
runApp()
output$table.param.select <- renderDataTable(DF_Param_Add(), selection = 'single')
runApp()
runApp()
runApp()
df.trib.quab.site$LocationLabel[2, , drop = FALSE]
df.trib.quab.site[2, , drop = FALSE]$LocationLabel
df.trib.quab.site$LocationLabel[2]
df.trib.quab.site$LocationLabel[[2]]
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
