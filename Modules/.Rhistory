)#fluidrow
), # end well panel
# New tabset panel for plots, tables, etc.
tabsetPanel(
# the "Plot" tab panel where everything related to the plot goes
tabPanel("Plot",
# the actual plot output
plotlyOutput(ns("plot"), width = "100%", height = 600),
# area where all plot specific inputs go
fluidRow(br(), br(),
column(1),
# new column
column(1,
downloadButton(ns('save.plot'), "Save Plot")
), # end column
column(1),
column(3,
checkboxGroupInput(ns("plot.misc"), "Misc. Plot Options:",
choices=c("Linear Regression with 95% conf. int.",
"Linear Regression w/o 95% conf. int.",
"Curve Regression with 95% conf. int.",
"Curve Regression w/o 95% conf. int.",
"log Scale X-axis",
"log Scale Y-axis"))
),
column(3,
radioButtons(ns("plot.color"), label = "Group with Colors:",
choices = c("None" = 1,
"Location" = "Loc",
"Depth" = "Depth",
"met/hydro filter 1 (select group)" = "met1",
"met/hydro filter 2 (select group)" = "met2",
"met/hydro filter 2 (select group)" = "met3",
"Flagged data" = "FlagCode"),
selected = "Loc")
), # end column
# new column
column(3,
radioButtons(ns("plot.shape"), label = "Group with Shapes:",
choices = c("None" = 1,
"Location" = "Loc",
"Depth" = "Depth",
"met/hydro filter 1 (make sure on color)" = "met1",
"met/hydro filter 2 (make sure on color)" = "met2",
"met/hydro filter 2 (make sure on color)" = "met3",
"Flagged data" = "FlagCode"),
selected = 1)
) # end column
) # end flluid row
), # end "plot" tabpanel
# "table" tabpanel
tabPanel("Table",
# first row - print button, etc
fluidRow(br(),
br(),
actionButton(ns("table.print"), "Print Table")
),
# next row
fluidRow(
dataTableOutput(ns("table"))
) # end fluid row
) # end tabpanel
)  # end tabsetpanel (plots, stats, etc.)
) # end taglist
runApp('F:/Nick Zinck/Shiny Water Quality/GitHub/DCRShinyApp')
runApp('F:/Nick Zinck/Shiny Water Quality/GitHub/DCRShinyApp')
runApp('F:/Nick Zinck/Shiny Water Quality/GitHub/DCRShinyApp')
runApp('F:/Nick Zinck/Shiny Water Quality/GitHub/DCRShinyApp')
ggplot(df.quab.res, aes(x = Date, y = Result, color = Site))
ggplot(df.res.quab, aes(x = Date, y = Result, color = Site))
ggplot(df.res.quab, aes(x = Date, y = Result, color = Site)) +
geom_point()
ggplot(df.res.quab, aes(x = Date, y = Result)) +
ggplot(aes(color = Site)) +
geom_point()
ggplot(df.res.quab, aes(x = Date, y = Result)) +
ggplot(df.res.quab, aes(color = Site)) +
geom_point()
ggplot(df.res.quab, aes(x = Date, y = Result)) +
geom_point(aes(color = Site)) +
geom_line(aes(color = Site))
?geom_smooth
ggplot(df.res.quab, aes(x = Date, y = Result)) +
geom_point(aes(color = Site)) +
geom_smooth(aes(linetype = Site))
runApp('F:/Nick Zinck/Shiny Water Quality/GitHub/DCRShinyApp')
runApp('F:/Nick Zinck/Shiny Water Quality/GitHub/DCRShinyApp')
runApp('F:/Nick Zinck/Shiny Water Quality/GitHub/DCRShinyApp')
runApp('F:/Nick Zinck/Shiny Water Quality/GitHub/DCRShinyApp')
runApp('F:/Nick Zinck/Shiny Water Quality/GitHub/DCRShinyApp')
?mean()
?quantile
?n
?n()
View(df.quab.site)
df.res.quab %>% summarise(n()) %>% paste()
df.res.quab %>% n() %>% summarise() %>% paste()
df.res.quab %>% summarise() %>% n() %>% paste()
shiny::runApp('F:/Nick Zinck/Shiny Water Quality/GitHub/DCRShinyApp')
runApp('F:/Nick Zinck/Shiny Water Quality/GitHub/DCRShinyApp')
runApp('F:/Nick Zinck/Shiny Water Quality/GitHub/DCRShinyApp')
runApp('F:/Nick Zinck/Shiny Water Quality/GitHub/DCRShinyApp')
runApp('F:/Nick Zinck/Shiny Water Quality/GitHub/DCRShinyApp')
runApp('F:/Nick Zinck/Shiny Water Quality/GitHub/DCRShinyApp')
runApp('F:/Nick Zinck/Shiny Water Quality/GitHub/DCRShinyApp')
runApp('F:/Nick Zinck/Shiny Water Quality/GitHub/DCRShinyApp')
?addmarkers
?addMarkers
library(leaflet)
?addMarkers
install.packages("dplyr")
?colorFactor
shiny::runApp('F:/Nick Zinck/Shiny Water Quality/GitHub/DCRShinyApp')
runApp('F:/Nick Zinck/Shiny Water Quality/GitHub/DCRShinyApp')
runApp('F:/Nick Zinck/Shiny Water Quality/GitHub/DCRShinyApp')
runApp('F:/Nick Zinck/Shiny Water Quality/GitHub/DCRShinyApp')
runApp('F:/Nick Zinck/Shiny Water Quality/GitHub/DCRShinyApp')
runApp('F:/Nick Zinck/Shiny Water Quality/GitHub/DCRShinyApp')
View(df.all.site)
runApp('F:/Nick Zinck/Shiny Water Quality/GitHub/DCRShinyApp')
?addMarkers
runApp('F:/Nick Zinck/Shiny Water Quality/GitHub/DCRShinyApp')
View(df.all.site)
runApp('F:/Nick Zinck/Shiny Water Quality/GitHub/DCRShinyApp')
runApp('F:/Nick Zinck/Shiny Water Quality/GitHub/DCRShinyApp')
runApp('F:/Nick Zinck/Shiny Water Quality/GitHub/DCRShinyApp')
runApp('F:/Nick Zinck/Shiny Water Quality/GitHub/DCRShinyApp')
View(df.all.site)
runApp('F:/Nick Zinck/Shiny Water Quality/GitHub/DCRShinyApp')
View(df.all.site)
runApp('F:/Nick Zinck/Shiny Water Quality/GitHub/DCRShinyApp')
runApp('F:/Nick Zinck/Shiny Water Quality/GitHub/DCRShinyApp')
runApp('F:/Nick Zinck/Shiny Water Quality/GitHub/DCRShinyApp')
View(df.all.site)
df.site.temp <- df.all.site %>%
mutate(MapFactor = paste(Watershed, Type))
df.site.temp$MapFactor[!(df.site.temp$MapFactor %in% c("Quabbin Tributary",
"Ware River Tributary",
"Wachusett Tributary",
"Quabbin Reservoir",
"Wachusett Transect"))] <- NA
View(df.site.temp)
runApp('F:/Nick Zinck/Shiny Water Quality/GitHub/DCRShinyApp')
runApp('F:/Nick Zinck/Shiny Water Quality/GitHub/DCRShinyApp')
runApp('F:/Nick Zinck/Shiny Water Quality/GitHub/DCRShinyApp')
?addLegend
?labelFormat
runApp('F:/Nick Zinck/Shiny Water Quality/GitHub/DCRShinyApp')
?as.facor
?as.factor
runApp('F:/Nick Zinck/Shiny Water Quality/GitHub/DCRShinyApp')
runApp('F:/Nick Zinck/Shiny Water Quality/GitHub/DCRShinyApp')
factor("Quabbin Tributary",
"Ware River Tributary",
"Wachusett Tributary",
"Quabbin Reservoir",
"Wachusett Transect",
NA))
factor("Quabbin Tributary",
"Ware River Tributary",
"Wachusett Tributary",
"Quabbin Reservoir",
"Wachusett Transect"))
factor("Quabbin Tributary",
"Ware River Tributary",
"Wachusett Tributary",
"Quabbin Reservoir",
"Wachusett Transect")
factor(c("Quabbin Tributary",
"Ware River Tributary",
"Wachusett Tributary",
"Quabbin Reservoir",
"Wachusett Transect"))
runApp('F:/Nick Zinck/Shiny Water Quality/GitHub/DCRShinyApp')
runApp('F:/Nick Zinck/Shiny Water Quality/GitHub/DCRShinyApp')
runApp('F:/Nick Zinck/Shiny Water Quality/GitHub/DCRShinyApp')
runApp('F:/Nick Zinck/Shiny Water Quality/GitHub/DCRShinyApp')
runApp('F:/Nick Zinck/Shiny Water Quality/GitHub/DCRShinyApp')
runApp('F:/Nick Zinck/Shiny Water Quality/GitHub/DCRShinyApp')
runApp('F:/Nick Zinck/Shiny Water Quality/GitHub/DCRShinyApp')
runApp('F:/Nick Zinck/Shiny Water Quality/GitHub/DCRShinyApp')
factor(map.levels)
factor(c("Quabbin Tributary",
"Ware River Tributary",
"Wachusett Tributary",
"Quabbin Reservoir",
"Wachusett Transect",
NA))
factor(c("Quabbin Tributary",
"Ware River Tributary",
"Wachusett Tributary",
"Quabbin Reservoir",
"Wachusett Transect",
NA))
runApp('F:/Nick Zinck/Shiny Water Quality/GitHub/DCRShinyApp')
runApp('F:/Nick Zinck/Shiny Water Quality/GitHub/DCRShinyApp')
df.site.temp <- df.all.site %>%
mutate(MapFactor = paste(Watershed, Type))
df.site.temp$MapFactor[!(df.site.temp$MapFactor %in% c("Quabbin Tributary",
"Ware River Tributary",
"Wachusett Tributary",
"Quabbin Reservoir",
"Wachusett Transect"))] <- "Not Available"
df.site.temp$MapFactor <- factor(df.site.temp$MapFactor,
levels = map.levels)
map.levels <- c("Quabbin Tributary",
"Ware River Tributary",
"Wachusett Tributary",
"Quabbin Reservoir",
"Wachusett Transect",
"Not Available")
df.site.temp <- df.all.site %>%
mutate(MapFactor = paste(Watershed, Type))
df.site.temp$MapFactor[!(df.site.temp$MapFactor %in% c("Quabbin Tributary",
"Ware River Tributary",
"Wachusett Tributary",
"Quabbin Reservoir",
"Wachusett Transect"))] <- "Not Available"
df.site.temp$MapFactor <- factor(df.site.temp$MapFactor,
levels = map.levels)
View(df.site.temp)
levels(df.site.temp$MapFactor)
runApp('F:/Nick Zinck/Shiny Water Quality/GitHub/DCRShinyApp')
runApp('F:/Nick Zinck/Shiny Water Quality/GitHub/DCRShinyApp')
runApp('F:/Nick Zinck/Shiny Water Quality/GitHub/DCRShinyApp')
runApp('F:/Nick Zinck/Shiny Water Quality/GitHub/DCRShinyApp')
runApp('F:/Nick Zinck/Shiny Water Quality/GitHub/DCRShinyApp')
?colorFactor
runApp('F:/Nick Zinck/Shiny Water Quality/GitHub/DCRShinyApp')
runApp('F:/Nick Zinck/Shiny Water Quality/GitHub/DCRShinyApp')
map.levels <- c("Quabbin Tributary",
"Ware River Tributary",
"Wachusett Tributary",
"Quabbin Reservoir",
"Wachusett Transect",
"Not Available")
levels(factor(map.levels))
runApp('F:/Nick Zinck/Shiny Water Quality/GitHub/DCRShinyApp')
runApp('F:/Nick Zinck/Shiny Water Quality/GitHub/DCRShinyApp')
runApp('F:/Nick Zinck/Shiny Water Quality/GitHub/DCRShinyApp')
runApp('F:/Nick Zinck/Shiny Water Quality/GitHub/DCRShinyApp')
runApp('F:/Nick Zinck/Shiny Water Quality/GitHub/DCRShinyApp')
runApp('F:/Nick Zinck/Shiny Water Quality/GitHub/DCRShinyApp')
View(df.quab.site)
runApp('F:/Nick Zinck/Shiny Water Quality/GitHub/DCRShinyApp')
range(c(3,4,5,6))
quantile[2]
quantile(c(3,4,5,6))[2]
quantile(c(3,4,5,6))[,2]
IQR(c(3,4,5,6))
runApp('F:/Nick Zinck/Shiny Water Quality/GitHub/DCRShinyApp')
View(df.res.wach)
runApp('F:/Nick Zinck/Shiny Water Quality/GitHub/DCRShinyApp')
runApp('F:/Nick Zinck/Shiny Water Quality/GitHub/DCRShinyApp')
levels(df.trib.quab$Parameter)
historical.parameters <- c("Ammonia",
"Calcium(II)",
"Cl2?", "Color",
"Dissolved Silicone Dioxide",
"Hardness",
"Iron")
df.trib.quab2 <- df.trib.quab %>%
relevel(historical.parameters)
df.trib.quab2  <- factor(levels = rev(levels(df.trib.quab2)))
historical.parameters <- c("Ammonia",
"Calcium(II)",
"Cl2?", "Color",
"Dissolved Silicone Dioxide",
"Hardness",
"Iron")
df.trib.quab2 <- df.trib.quab
df.trib.quab2$Parameter <- df.trib.quab2$Parameter %>%
relevel(historical.parameters)
df.trib.quab2$Parameter  <- factor(levels = rev(levels(df.trib.quab2$Parameter)))
df.trib.quab2$Parameter <- df.trib.quab2$Parameter %>%
relevel("Ammonia")
df.trib.quab2$Parameter <- df.trib.quab2$Parameter %>%
relevel("Calcium(II)")
df.trib.quab2$Parameter  <- factor(levels = rev(levels(df.trib.quab2$Parameter)))
df.trib.quab2$Parameter  <- df.trib.quab2$Parameter %>% factor(levels = rev(levels(df.trib.quab2$Parameter)))
levels(df.trib.quab2$Parameter)
runApp('F:/Nick Zinck/Shiny Water Quality/GitHub/DCRShinyApp')
df.trib.quab$Parameter <- df.trib.quab$Parameter %>%
relevel("Ammonia")
df.trib.quab$Parameter <- df.trib.quab$Parameter %>%
relevel("Calcium(II)")
df.trib.quab$Parameter <- df.trib.quab$Parameter %>%
relevel("Cl2?")
df.trib.quab$Parameter <- df.trib.quab$Parameter %>%
relevel("Color")
df.trib.quab$Parameter <- df.trib.quab$Parameter %>%
relevel("Dissolved Silicone Dioxide")
df.trib.quab$Parameter <- df.trib.quab$Parameter %>%
relevel("Hardness")
df.trib.quab$Parameter <- df.trib.quab$Parameter %>%
relevel("Iron")
df.trib.quab$Parameter  <- df.trib.quab$Parameter %>% factor(levels = rev(levels(df.trib.quab2$Parameter)))
View(df.trib.quab)
runApp('F:/Nick Zinck/Shiny Water Quality/GitHub/DCRShinyApp')
runApp('F:/Nick Zinck/Shiny Water Quality/GitHub/DCRShinyApp')
runApp('F:/Nick Zinck/Shiny Water Quality/GitHub/DCRShinyApp')
historical.parameters[1]
historical.parameters[,1]
historical.parameters[[1]]
historical.parameters[[[1]]
historical.parameters[[[1]]]
runApp('F:/Nick Zinck/Shiny Water Quality/GitHub/DCRShinyApp')
runApp('F:/Nick Zinck/Shiny Water Quality/GitHub/DCRShinyApp')
runApp('F:/Nick Zinck/Shiny Water Quality/GitHub/DCRShinyApp')
param.choices <- df.trib.quab %>%
.$Parameter %>%
factor()
param.choices <- param.choices %>% factor(levels = rev(levels(param.choices)))
# move historical to front (one at a time via for loop). Historical Parameters can be changed in Sources/Settings.R
for (i in length(historical.parameters)){
if(historical.parameters[i] %in% levels(param.choices)){
param.choices <- param.choices %>%
relevel(historical.parameters[i])
}
}
# reverse order again (makes alphabetical with historical at end)
param.choices <- param.choices %>% factor(levels = rev(levels(param.choices)))
param.choices
param.choices <- df.trib.quab %>%
.$Parameter %>%
factor()
df.trib.quab %>%
.$Parameter %>%
factor()
df.trib.quab %>%
.$Parameter %>%
factor() %>%
levels()
class(param.choices)
param.choices <- df.trib.quab %>%
.$Parameter %>%
factor() %>%
levels()
# reorder for historical parameters
param.choices <- param.choices %>% factor(levels = rev(levels(param.choices)))
# move historical to front (one at a time via for loop). Historical Parameters can be changed in Sources/Settings.R
for (i in length(historical.parameters)){
if(historical.parameters[i] %in% levels(param.choices)){
param.choices <- param.choices %>%
relevel(historical.parameters[i])
}
}
# reverse order again (makes alphabetical with historical at end)
param.choices <- param.choices %>% factor(levels = rev(levels(param.choices)))
class(param.choices)
param.choices
param.choices <- df.trib.quab %>%
.$Parameter %>%
factor() %>%
levels()
# reorder for historical parameters
param.choices <- param.choices %>% factor(levels = rev(levels(param.choices)))
param.choices
param.choices <- df.trib.quab %>%
.$Parameter %>%
factor() %>%
levels()
levels(param.choices)
param.choices <- df.trib.quab %>%
.$Parameter %>%
factor() %>%
levels()
levels(param.choices)
param.choices
param.choices <- df.trib.quab %>%
.$Parameter %>%
factor() %>%
levels()
# reorder for historical parameters
param.choices <- param.choices %>% factor(levels = rev(param.choices))
param.choices
for (i in length(historical.parameters)){
if(historical.parameters[i] %in% levels(param.choices)){
param.choices <- param.choices %>%
relevel(historical.parameters[i])
}
}
param.choices
param.choices <- param.choices %>% factor(levels = rev(levels(param.choices)))
param.choices
levels(param.choices)
?factor
param.choices <- df.trib.quab %>%
.$Parameter %>%
factor() %>%
levels()
# reorder for historical parameters
param.choices <- param.choices %>% factor(levels = rev(param.choices), ordered = TRUE)
# move historical to front (one at a time via for loop). Historical Parameters can be changed in Sources/Settings.R
for (i in length(historical.parameters)){
if(historical.parameters[i] %in% levels(param.choices)){
param.choices <- param.choices %>%
relevel(historical.parameters[i])
}
}
# reverse order again (makes alphabetical with historical at end)
param.choices <- param.choices %>% factor(levels = rev(levels(param.choices)))
levels(param.choices)
param.choices <- df.trib.quab %>%
.$Parameter %>%
factor() %>%
levels()
# reorder for historical parameters
param.choices <- param.choices %>% factor(levels = rev(param.choices), ordered = TRUE)
levels(param.choices)
# move historical to front (one at a time via for loop). Historical Parameters can be changed in Sources/Settings.R
for (i in length(historical.parameters)){
if(historical.parameters[i] %in% levels(param.choices)){
param.choices <- param.choices %>%
relevel(historical.parameters[i])
}
}
levels(param.choices)
# reverse order again (makes alphabetical with historical at end)
param.choices <- param.choices %>% factor(levels = rev(levels(param.choices)))
levels(param.choices)
param.choices <- df.trib.quab %>%
.$Parameter %>%
factor() %>%
levels()
# reorder for historical parameters
param.choices <- param.choices %>% factor(levels = rev(param.choices), ordered = TRUE)
levels(param.choices)
# move historical to front (one at a time via for loop). Historical Parameters can be changed in Sources/Settings.R
for (i in length(historical.parameters)){
if(historical.parameters[[i]] %in% levels(param.choices)){
param.choices <- param.choices %>%
relevel(historical.parameters[[i])
}
}
levels(param.choices)
param.choices <- df.trib.quab %>%
.$Parameter %>%
factor() %>%
levels()
# reorder for historical parameters
param.choices <- param.choices %>% factor(levels = rev(param.choices), ordered = TRUE)
levels(param.choices)
# move historical to front (one at a time via for loop). Historical Parameters can be changed in Sources/Settings.R
for (i in length(historical.parameters)){
if(historical.parameters[[i]] %in% levels(param.choices)){
param.choices <- param.choices %>%
relevel(historical.parameters[[i]])
}
}
levels(param.choices)
# reverse order again (makes alphabetical with historical at end)
param.choices <- param.choices %>% factor(levels = rev(levels(param.choices)))
levels(param.choices)
param.choices <- df.trib.quab %>%
.$Parameter %>%
factor() %>%
levels()
# reorder for historical parameters
param.choices <- param.choices %>% factor(levels = rev(param.choices), ordered = TRUE)
levels(param.choices)
is.factor(param.choices)
param.choices <- param.choices %>%
relevel("Iron")
?relevel
param.choices <-  relevel(param.choices, ref = "Iron")
param.choices <-  relevel(param.choices, ref = "Turbidity")
is.factor(param.choices)
levels(param.choices)
for (i in length(historical.parameters)){
if(historical.parameters[[i]] %in% levels(param.choices)){
y <- "lkj"
#param.choices <- param.choices %>%
relevel(historical.parameters[[i]])
}
}
class(historical.parameters[[2]])
runApp('F:/Nick Zinck/Shiny Water Quality/GitHub/DCRShinyApp')
shiny::runApp('F:/Nick Zinck/Shiny Water Quality/GitHub/DCRShinyApp')
runApp('F:/Nick Zinck/Shiny Water Quality/GitHub/DCRShinyApp')
runApp('F:/Nick Zinck/Shiny Water Quality/GitHub/DCRShinyApp')
runApp('F:/Nick Zinck/Shiny Water Quality/GitHub/DCRShinyApp')
runApp('F:/Nick Zinck/Shiny Water Quality/GitHub/DCRShinyApp')
runApp('F:/Nick Zinck/Shiny Water Quality/GitHub/DCRShinyApp')
runApp('F:/Nick Zinck/Shiny Water Quality/GitHub/DCRShinyApp')
runApp('F:/Nick Zinck/Shiny Water Quality/GitHub/DCRShinyApp')
runApp('F:/Nick Zinck/Shiny Water Quality/GitHub/DCRShinyApp')
runApp('F:/Nick Zinck/Shiny Water Quality/GitHub/DCRShinyApp')
runApp('F:/Nick Zinck/Shiny Water Quality/GitHub/DCRShinyApp')
runApp('F:/Nick Zinck/Shiny Water Quality/GitHub/DCRShinyApp')
runApp('F:/Nick Zinck/Shiny Water Quality/GitHub/DCRShinyApp')
runApp('F:/Nick Zinck/Shiny Water Quality/GitHub/DCRShinyApp')
runApp('F:/Nick Zinck/Shiny Water Quality/GitHub/DCRShinyApp')
runApp('F:/Nick Zinck/Shiny Water Quality/GitHub/DCRShinyApp')
runApp('F:/Nick Zinck/Shiny Water Quality/GitHub/DCRShinyApp')
hey <- c()
hey <- c(hey, "two")
runApp('F:/Nick Zinck/Shiny Water Quality/GitHub/DCRShinyApp')
runApp('F:/Nick Zinck/Shiny Water Quality/GitHub/DCRShinyApp')
hey$what = NULL
hey
length(hey$what)
runApp('F:/Nick Zinck/Shiny Water Quality/GitHub/DCRShinyApp')
runApp('F:/Nick Zinck/Shiny Water Quality/GitHub/DCRShinyApp')
runApp('F:/Nick Zinck/Shiny Water Quality/GitHub/DCRShinyApp')
runApp('F:/Nick Zinck/Shiny Water Quality/GitHub/DCRShinyApp')
runApp('F:/Nick Zinck/Shiny Water Quality/GitHub/DCRShinyApp')
hey <- c("1", "3", "4")
hey[!(hey %in% "3")]
hey[!hey %in% "3"]
hey[!hey %in% "4"]
runApp('F:/Nick Zinck/Shiny Water Quality/GitHub/DCRShinyApp')
