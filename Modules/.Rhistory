library(shiny)
library(dplyr)
runGitHub("DCRShinyApp", "nzinck17")
runGitHub("DCRShinyApp", "nzinck17")
runGitHub("DCRShinyApp", "nzinck17")
runGitHub("DCRShinyApp", "nzinck17")
runGitHub("DCRShinyApp", "nzinck17")
runApp('F:/Nick Zinck/Shiny Water Quality/GitHub/DCRShinyApp')
View(df.res.quab)
runApp('F:/Nick Zinck/Shiny Water Quality/GitHub/DCRShinyApp')
shiny::runApp('F:/Nick Zinck/Shiny Water Quality/GitHub/DCRShinyApp')
df.temp <- df.res.quab %>%
filter(Loc %in% c(input$loc)) %>%
filter(Depth %in% c(input$depth)) %>%
filter(Date > input$date[1], Date < input$date[2])
df.temp.x <-  df.temp %>%
filter(Parameter %in% c(input$x.param)) %>%
filter(Parameter %in% c(input$x.range)) %>%
rename(x.Parameter = Parameter, x.Result = Result) %>%
select(Site, Loc, Depth, Date, x.Parameter, x.Result)
df.temp.y <-  df.temp %>%
filter(Parameter %in% c(input$y.param)) %>%
filter(Parameter %in% c(input$y.range)) %>%
rename(y.Parameter = Parameter, y.Result = Result) %>%
select(Site, Loc, Depth, Date, y.Parameter, x.Result)
inner_join(df.temp.x, df.temp.y, by = c("Site", "Loc", "Depth, Date"))
runApp('F:/Nick Zinck/Shiny Water Quality/GitHub/DCRShinyApp')
df.temp <- df.res.quab %>%
filter(Loc %in% "222") %>%
filter(Depth %in% "Deep") #%>%
#filter(Date > input$date[1], Date < input$date[2])
df.temp.x <-  df.temp %>%
filter(Parameter %in% "Turbidity (NTU)" %>%
#filter(Parameter %in% c(input$x.range)) %>%
rename(x.Parameter = Parameter, x.Result = Result) %>%
select(Site, Loc, Depth, Date, x.Parameter, x.Result)
df.temp.y <-  df.temp %>%
filter(Parameter %in% "pH") %>%
#filter(Parameter %in% c(input$y.range)) %>%
rename(y.Parameter = Parameter, y.Result = Result) %>%
select(Site, Loc, Depth, Date, y.Parameter, x.Result)
inner_join(df.temp.x, df.temp.y, by = c("Site", "Loc", "Depth, Date"))
df.temp <- df.res.quab %>%
filter(Loc %in% "202") %>%
filter(Depth %in% "Deep") #%>%
#filter(Date > input$date[1], Date < input$date[2])
df.temp.x <-  df.temp %>%
filter(Parameter %in% "Turbidity (NTU)" %>%
#filter(Parameter %in% c(input$x.range)) %>%
rename(x.Parameter = Parameter, x.Result = Result) %>%
select(Site, Loc, Depth, Date, x.Parameter, x.Result)
df.temp.y <-  df.temp %>%
filter(Parameter %in% "pH") %>%
#filter(Parameter %in% c(input$y.range)) %>%
rename(y.Parameter = Parameter, y.Result = Result) %>%
select(Site, Loc, Depth, Date, y.Parameter, x.Result)
inner_join(df.temp.x, df.temp.y, by = c("Site", "Loc", "Depth, Date"))
View(df.temp)
df.temp.y <-  df.temp %>%
filter(Parameter %in% "pH") %>%
#filter(Parameter %in% c(input$y.range)) %>%
rename(y.Parameter = Parameter, y.Result = Result) %>%
select(Site, Loc, Depth, Date, y.Parameter, x.Result)
df.temp <- df.res.quab %>%
filter(Loc %in% "202") %>%
filter(Depth %in% "Deep") #%>%
#filter(Date > input$date[1], Date < input$date[2])
df.temp.x <-  df.temp %>%
filter(Parameter %in% "Turbidity (NTU)" %>%
#filter(Parameter %in% c(input$x.range)) %>%
rename(x.Parameter = Parameter, x.Result = Result) %>%
select(Site, Loc, Depth, Date, x.Parameter, x.Result)
df.temp.y <-  df.temp %>%
filter(Parameter %in% "pH") %>%
#filter(Parameter %in% c(input$y.range)) %>%
rename(y.Parameter = Parameter, y.Result = Result) %>%
select(Site, Loc, Depth, Date, y.Parameter, y.Result)
inner_join(df.temp.x, df.temp.y, by = c("Site", "Loc", "Depth, Date"))
df.temp <- df.res.quab %>%
filter(Loc %in% "202") %>%
filter(Depth %in% "Deep") #%>%
#filter(Date > input$date[1], Date < input$date[2])
df.temp.x <-  df.temp %>%
filter(Parameter %in% "Turbidity (NTU)" %>%
#filter(Parameter %in% c(input$x.range)) %>%
rename(x.Parameter = Parameter, x.Result = Result) %>%
select(Site, Loc, Depth, Date, x.Parameter, x.Result)
df.temp <- df.res.quab %>%
filter(Loc %in% "202") %>%
filter(Depth %in% "Deep")
df.temp.x <-  df.temp %>%
filter(Parameter %in% "Turbidity (NTU)" %>%
rename(x.Parameter = Parameter, x.Result = Result) %>%
select(Site, Loc, Depth, Date, x.Parameter, x.Result)
df.temp.x <-  df.temp %>%
filter(Parameter %in% "Turbidity (NTU)" %>%
rename(x.Parameter = Parameter, x.Result = Result) %>%
select(Site, Loc, Depth, Date, x.Parameter, x.Result)
df.temp.x <-  df.temp %>%
filter(Parameter %in% "Turbidity (NTU)" %>%
rename(x.Parameter = Parameter, x.Result = Result)
df.temp <- df.res.quab %>%
filter(Loc %in% "202") %>%
filter(Depth %in% "Deep")
df.temp.x <-  df.temp %>%
filter(Parameter %in% "Turbidity (NTU)") %>%
rename(x.Parameter = Parameter, x.Result = Result) %>%
select(Site, Loc, Depth, Date, x.Parameter, x.Result)
df.temp.y <-  df.temp %>%
filter(Parameter %in% "pH") %>%
rename(y.Parameter = Parameter, y.Result = Result) %>%
select(Site, Loc, Depth, Date, y.Parameter, y.Result)
df.temp <- df.res.quab %>%
filter(Loc %in% "202") %>%
filter(Depth %in% "Deep")
df.temp.x <-  df.temp %>%
filter(Parameter %in% "Turbidity (NTU)") %>%
rename(x.Parameter = Parameter, x.Result = Result) %>%
select(Site, Loc, Depth, Date, x.Parameter, x.Result)
df.temp.y <-  df.temp %>%
filter(Parameter %in% "pH") %>%
rename(y.Parameter = Parameter, y.Result = Result) %>%
select(Site, Loc, Depth, Date, y.Parameter, y.Result)
inner_join(df.temp.x, df.temp.y, by = c("Site", "Loc", "Depth, Date"))
inner_join(df.temp.x, df.temp.y, by = c("Site", "Loc", "Depth", "Date"))
df.temp <- df.res.quab %>%
filter(Loc %in% "202") %>%
filter(Depth %in% "Deep")
df.temp.x <-  df.temp %>%
filter(Parameter %in% "Turbidity (NTU)") %>%
rename(x.Parameter = Parameter, x.Result = Result) %>%
select(Site, Loc, Depth, Date, x.Parameter, x.Result)
df.temp.y <-  df.temp %>%
filter(Parameter %in% "pH") %>%
rename(y.Parameter = Parameter, y.Result = Result) %>%
select(Site, Loc, Depth, Date, y.Parameter, y.Result)
df.temp.xy <- inner_join(df.temp.x, df.temp.y, by = c("Site", "Loc", "Depth", "Date"))
View(df.temp.xy)
runApp('F:/Nick Zinck/Shiny Water Quality/GitHub/DCRShinyApp')
?ggplot()
runApp('F:/Nick Zinck/Shiny Water Quality/GitHub/DCRShinyApp')
runApp('F:/Nick Zinck/Shiny Water Quality/GitHub/DCRShinyApp')
View(df.res.quab)
runApp('F:/Nick Zinck/Shiny Water Quality/GitHub/DCRShinyApp')
p <- ggplot(df.react(), aes(x = x.Result, y = y.Result)) +
#labs(x = paste(input$x.param), y = paste(input$y.param)) +  # need to Add unit display for plot
theme_bw() +
theme(plot.margin = unit(c(0.2, 0.2, 0.2, 0.5), "in"))
runApp('F:/Nick Zinck/Shiny Water Quality/GitHub/DCRShinyApp')
tagList(
# Well Panel - Upper section of page (everything surrounded by light blue)
wellPanel(
fluidRow(
# first column
column(3,
wellPanel(
checkboxGroupInput(ns("loc"), "Site Location:",
choices=levels(factor(df$Loc)),
selected = factor(df$Loc[1]),
inline = TRUE),
checkboxGroupInput(ns("depth"), "Depth:",
choices=levels(factor(df$Depth)),
selected = factor(df$Depth[1]),
inline = TRUE),
leafletOutput(ns("map"), height = 350 )
)#well
),#col
column(9,
fluidRow(
column(4,
wellPanel(
selectInput(ns("y.param"), "Water Quality Parameter:",
choices=levels(factor(df$Parameter)),
selected = factor(df$Parameter[4])),
uiOutput(ns("y.range.ui"))
)#well
),
column(4,
wellPanel(
strong("X axis Parameter:"),
radioButtons(ns("x.option"), label = NULL, choices = c("Water Quality", "Meteorology or Hydrology"), inline = TRUE),
# Note: Conditional panels and shiny modules don't work well due to ns() is an R function
# and conditional panel condition uses javascript
conditionalPanel(condition = paste0("input['", ns("x.option"), "'] == 'Water Quality' "),
selectInput(ns("x.param"), "Water Quality Parameter:",
choices=levels(factor(df$Parameter)),
selected = factor(df$Parameter[4])),
uiOutput(ns("x.range.ui"))
),
conditionalPanel(condition = paste0("input['", ns("x.option"), "'] == 'Meteorology or Hydrology' "),
selectInput(ns("x.met.param"), label = NULL, choices = c("Wind Speed",
"Wind Direction",
"Precipitation - 24 hrs",
"Precipitation - 48 hrs",
"Temperature",
"Cloud Cover",
"Flow - Quabbin Aquaduct",
"Flow - East Branch Swift",
"Flow - West Branch Swift",
"Flow - Quinapoxet",
"Flow - Stillwater"),
selected = "Precipitation - 24 hrs"),
sliderInput(ns("x.met.range"), "Value Range:", min = 0, max = 12, value = c(0,12), step = 0.5)
)
) #well
),
column(4,
wellPanel(
uiOutput(ns("date.ui"))
),#well
wellPanel(
h4("Number of Samples in Selected Data:", align = "center")#,
#h3(textOutput(ns("text.num")), align = "center")
)#well
)#col
),#fluidrow
hr(),
br(),
fluidRow(
# new column
column(4,
wellPanel(
strong("Meteoro/Hydro Filter 1"),
br(), br(),
radioButtons(ns("met.option.1"), label = NULL, choices = c("off", "on"), inline = TRUE),
selectInput(ns("met.param.1"), label = NULL, choices = c("Wind Speed",
"Wind Direction",
"Precipitation - 24 hrs",
"Precipitation - 48 hrs",
"Temperature",
"Cloud Cover",
"Flow - Quabbin Aquaduct",
"Flow - East Branch Swift",
"Flow - West Branch Swift",
"Flow - Quinapoxet",
"Flow - Stillwater"),
selected = "Wind Speed"),
sliderInput(ns("met.value.1"), "Value Range:", min = 0, max = 12, value = c(0,12), step = 0.5)
)
),
column(4,
wellPanel(
strong("Meteoro/Hydro Filter 2"),
br(), br(),
radioButtons(ns("met.option.2"), label = NULL, choices = c("off", "on"), inline = TRUE),
selectInput(ns("met.param.2"), label = NULL, choices = c("Wind Speed",
"Wind Direction",
"Precipitation - 24 hrs",
"Precipitation - 48 hrs",
"Temperature",
"Cloud Cover",
"Flow - Quabbin Aquaduct",
"Flow - East Branch Swift",
"Flow - West Branch Swift",
"Flow - Quinapoxet",
"Flow - Stillwater"),
selected = "Precipitation - 24 hrs"),
sliderInput(ns("met.value.2"), "Value Range:", min = 0, max = 12, value = c(0,12), step = 0.5)
)#well
),#col
column(4,
wellPanel(
strong("Meteoro/Hydro Filter 3"),
br(), br(),
radioButtons(ns("met.option.3"), label = NULL, choices = c("off", "on"), inline = TRUE),
selectInput(ns("met.param.3"), label = NULL, choices = c("Wind Speed",
"Wind Direction",
"Precipitation - 24 hrs",
"Precipitation - 48 hrs",
"Temperature",
"Cloud Cover",
"Flow - Quabbin Aquaduct",
"Flow - East Branch Swift",
"Flow - West Branch Swift",
"Flow - Quinapoxet",
"Flow - Stillwater"),
selected = "Precipitation - 24 hrs"),
sliderInput(ns("met.value.3"), "Value Range:", min = 0, max = 12, value = c(0,12), step = 0.5)
)#well
)#col
)#fluidrow
)#col
)#fluidrow
), # end well panel
# New tabset panel for plots, tables, etc.
tabsetPanel(
# the "Plot" tab panel where everything related to the plot goes
tabPanel("Plot",
# the actual plot output
plotlyOutput(ns("plot"), width = "100%", height = 600),
# area where all plot specific inputs go
fluidRow(br(), br(),
column(1),
# new column
column(1,
downloadButton(ns('save.plot'), "Save Plot")
), # end column
column(1),
column(3,
checkboxGroupInput(ns("plot.misc"), "Misc. Plot Options:",
choices=c("Linear Regression with 95% conf. int.",
"Linear Regression w/o 95% conf. int.",
"Curve Regression with 95% conf. int.",
"Curve Regression w/o 95% conf. int.",
"log Scale X-axis",
"log Scale Y-axis"))
),
column(3,
radioButtons(ns("plot.color"), label = "Group with Colors:",
choices = c("None" = 1,
"Location" = "Loc",
"Depth" = "Depth",
"met/hydro filter 1 (select group)" = "met1",
"met/hydro filter 2 (select group)" = "met2",
"met/hydro filter 2 (select group)" = "met3",
"Flagged data" = "FlagCode"),
selected = "Loc")
), # end column
# new column
column(3,
radioButtons(ns("plot.shape"), label = "Group with Shapes:",
choices = c("None" = 1,
"Location" = "Loc",
"Depth" = "Depth",
"met/hydro filter 1 (make sure on color)" = "met1",
"met/hydro filter 2 (make sure on color)" = "met2",
"met/hydro filter 2 (make sure on color)" = "met3",
"Flagged data" = "FlagCode"),
selected = 1)
) # end column
) # end flluid row
), # end "plot" tabpanel
# "table" tabpanel
tabPanel("Table",
# first row - print button, etc
fluidRow(br(),
br(),
actionButton(ns("table.print"), "Print Table")
),
# next row
fluidRow(
dataTableOutput(ns("table"))
) # end fluid row
) # end tabpanel
)  # end tabsetpanel (plots, stats, etc.)
) # end taglist
runApp('F:/Nick Zinck/Shiny Water Quality/GitHub/DCRShinyApp')
runApp('F:/Nick Zinck/Shiny Water Quality/GitHub/DCRShinyApp')
runApp('F:/Nick Zinck/Shiny Water Quality/GitHub/DCRShinyApp')
runApp('F:/Nick Zinck/Shiny Water Quality/GitHub/DCRShinyApp')
ggplot(df.quab.res, aes(x = Date, y = Result, color = Site))
ggplot(df.res.quab, aes(x = Date, y = Result, color = Site))
ggplot(df.res.quab, aes(x = Date, y = Result, color = Site)) +
geom_point()
ggplot(df.res.quab, aes(x = Date, y = Result)) +
ggplot(aes(color = Site)) +
geom_point()
ggplot(df.res.quab, aes(x = Date, y = Result)) +
ggplot(df.res.quab, aes(color = Site)) +
geom_point()
ggplot(df.res.quab, aes(x = Date, y = Result)) +
geom_point(aes(color = Site)) +
geom_line(aes(color = Site))
?geom_smooth
ggplot(df.res.quab, aes(x = Date, y = Result)) +
geom_point(aes(color = Site)) +
geom_smooth(aes(linetype = Site))
runApp('F:/Nick Zinck/Shiny Water Quality/GitHub/DCRShinyApp')
runApp('F:/Nick Zinck/Shiny Water Quality/GitHub/DCRShinyApp')
runApp('F:/Nick Zinck/Shiny Water Quality/GitHub/DCRShinyApp')
runApp('F:/Nick Zinck/Shiny Water Quality/GitHub/DCRShinyApp')
runApp('F:/Nick Zinck/Shiny Water Quality/GitHub/DCRShinyApp')
?mean()
?quantile
?n
?n()
View(df.quab.site)
df.res.quab %>% summarise(n()) %>% paste()
df.res.quab %>% n() %>% summarise() %>% paste()
df.res.quab %>% summarise() %>% n() %>% paste()
shiny::runApp('F:/Nick Zinck/Shiny Water Quality/GitHub/DCRShinyApp')
runApp('F:/Nick Zinck/Shiny Water Quality/GitHub/DCRShinyApp')
runApp('F:/Nick Zinck/Shiny Water Quality/GitHub/DCRShinyApp')
runApp('F:/Nick Zinck/Shiny Water Quality/GitHub/DCRShinyApp')
runApp('F:/Nick Zinck/Shiny Water Quality/GitHub/DCRShinyApp')
runApp('F:/Nick Zinck/Shiny Water Quality/GitHub/DCRShinyApp')
runApp('F:/Nick Zinck/Shiny Water Quality/GitHub/DCRShinyApp')
runApp('F:/Nick Zinck/Shiny Water Quality/GitHub/DCRShinyApp')
